/*
CDN：本质就是一个离你比较近的缓存

1.请求经过本地DNS系统解析最终将域名的解析权交给CNAME指向的CDN专用DNS服务器，这个服务器将CDN的全局负载均衡设备IP地址返回
2.然后请求全局负载均衡设备，它根据请求选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求
3.区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，返回一台缓存服务器的IP地址，全局负载均衡设备把缓存服务器的IP地址返回给用户
4.如果这台缓存服务器上没有需要的资源会继续向上直到网站源服务器去请求

使用CDN：只需要修改自己的DNS解析，设置一个CNAME指向CDN服务商即可

CNAME过程：
    1.我们访问 cdn 资源的地址一般是 a.cloud.com等(公司地址)，但是我们用的 cdn 的服务却是第三方的，如tencent.cdn。
        在 dns 查询的时候，需要把我们访问 a.cloud.com的地址映射到 tencent.cdn 的地址上 。
    2.然后拿着映射后的地址再去走一遍 dns 解析，成功之后才获取到第三方提供的全局负载均衡系统的 IP。再继续走后面的流程。

使用CDN的原因：
    1.我们经常有一些比较频繁请求且容量比较大的文件，并且更新频率不那么高的文件。采用分布式的方式扔在 cdn 上提高访问速度
    2.带宽优化，分担网络流量，减轻压力，
    3.集群抗攻击

设置
    1.缓存的设置:
        Cache-Control:max-age 但会应用于一个请求经过的每一级,如果我们希望 CDN 不缓存那么久，要怎么办呢？

        s-maxage：设置代理服务器的缓存时间，会覆盖 max-age
            可以把 max-age 用于本地缓存，把s-maxage用于CDN缓存时间，避免脏数据的产生。

    2.判断是否命中缓存
        各大厂商的 CDN 返回的响应头都会有一个 X-Cache，上面内容是 Hit 或者 Miss，还会加上诸如 Memory 或者 Disk 的缩写
        表示内存还是磁盘，如果出现 Upstream 或者 Miss 则表示没有命中

1.静态资源尽量使用 CDN 加载：
浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。

2.对于API接口常变没法用CDN，可以用浏览器的缓存策略


*/


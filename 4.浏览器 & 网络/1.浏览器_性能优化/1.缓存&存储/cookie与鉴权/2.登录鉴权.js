/*
* 1.普通登录：
    1）进入网站第一次请求，服务器生成Session_id存起来，并响应给客户端种入(用Set-Cookie) Cookie(Session_id)
    2）登录后，在服务器查询Session_id并写入{ Session_id：xxx,user_info:{ 用户登陆的各种信息 } }
    3）以后每次请求都会带上这个cookie，服务器端就知道访问的就是哪个客户端了。

优点：
    1）在客户端除了 session_id 以外，看不到任何信息，不容易篡改
    2）不需要前端介入，服务端通过 Set-Cookie http 头就可以完成 uid 和 Cookie 的更新

* 2.JWT（JSON Web Token）
代表了把凭据存客户端的思想，和当时的 Cookie 有点像，登录的时候把那些需要的信息 base64 编码作为一段，
然后再对这些字段用 secret 进行签名，连起来这么一段 Token 去发给客户端作为凭据
好处：
	1.登录状态都是跟着客户端跑的，时效信息都存在客户端，Session 如果过期了，要对 Session 数据库进行垃圾清理，
		那么凭据存在客户端就不需要，丢了就是登出。
	2.因为都是跟着客户端跑的，在服务器扩大搞集群，搞异地多活，就不需要考虑读数据库这种事情，因为都是客户端请求为 based ，
		随便哪个服务器来 handle 请求都没有问题

问题：
	1.中间那部分是 base64 编码的，如果熟悉标准的话，等于就是明文存储凭据了，虽然不能改，当然还是能看到。
    2.Token 类的鉴权需要前端参与并存储，存储一般会放在 localStorage 等地方，因此其实是比较容易受到 XSS 的影响。

* 3.OAuth2.0登录（第三方登录）：
    第三方提供一个登录入口，也就是第三方域名下的登录页面。主站需要登录的时候，引导用户重定向到第三方的登录页面，
用户输入账号密码之后，登录第三方系统，第三方系统匹配帐号成功之后，带上一个code到主站的回调地址，主站接收到code，
短时间内拿着code请求第三方提供获取长期凭证的接口(因为code有一个比较短的过期时间)，这个长期凭证叫access_token，
获取之后就把这个access_token存到数据库中，请求一些第三方提供的API，需要用到这个access_token，
因为这个token就是记录用户在第三方系统的一个身份凭证。一些系统，在获取access_token的时候，还会返回一个副参数refresh_token，
因为access_token是有过期时间的，一旦过期了，主站可以使用refresh_token请求第三方提供的接口获取新的access_token以及新的refresh_token。

*/
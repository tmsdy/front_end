/*
node：顾客(请求) 服务员(主线程) 厨师(后面真正干活的模块)
1.主线程是单线程(异步)，app.js从上向下执行，但是厨师是多线程的

2.异步非阻塞：主要用callback实现异步，将后续的逻辑包成函数传到当前执行的函数中，当执行的函数得到结果后再执行传入的函数(回调函数)。

3.node不适合大量计算，这样在服务员这儿浪费时间多就阻塞了

4.I/O操作：读写操作，异步读写

5.事件驱动：顾客来了点单来驱动干活流程(发布订阅)

如何理解点餐取号的时候不阻塞？
阻塞状态：如果接一个服务员发来的业务服务员要等着厨师做好才能接单的话就算阻塞


*/
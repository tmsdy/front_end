/*

* 1.计算机核心是CPU，像是工厂，进程是车间，线程是工人
进程：CPU 资源分配的最小单位（是能拥有资源和独立运行的最小单位）
线程：CPU 调度的最小单位（是建立在进程基础上的一次程序运行单位）

* 2.浏览器的多进程架构：以 Chrome 为例,它由多个进程组成,每个进程都有自己核心的职责,它们相互配合完成浏览器的整体功能
    * 主进程：负责浏览器界面的显示与交互。各个页面的管理,创建和销毁其他进程。网络的资源管理、下载等。
    * 第三方插件进程：每种类型的插件对应一个进程,仅当使用该插件时才创建。
    * GPU进程：最多只有一个,用于 3D 绘制等
    * 渲染进程(重要)：称为浏览器渲染进程或浏览器内核,内部是多线程的。主要线程有：
* GUI渲染线程 * JS引擎线程 * 事件触发线程 * 定时触发器线程 * 异步http请求线程

* 3.渲染进程的多线程
* 1）GUI渲染线程
    * 负责渲染浏览器界面,解析 HTML,CSS,构建 DOM 树和 RenderObject 树,布局和绘制等
    * 负责重绘和回流工作
    * GUI渲染线程与JS引擎线程是互斥的，一个执行另一个就会暂时挂起

* 2）JS引擎线程
    * 负责处理解析JS脚本，运行代码
    * 等待任务队列中任务的到来,然后加以处理,一个渲染进程无论何时有且只有一个JS引擎在运行JS

* 3）事件触发线程
    * 负责控制事件循环
    * 当 JS 引擎执行代码块如setTimeOut时（鼠标点击、AJAX 异步请求等）,会将对应任务添加到事件线程中，当对应的      事件符合触发条件被触发时,该线程会把事件添加到待处理队列的队尾,等待 JS 引擎的处理

* 4）定时触发器线程
    * setInterval 与 setTimeout 所在线程，通过单独线程来计时并触发定时（计时完毕后,添加到事件队列中,等待 JS 引擎空闲后执行）

* 5）异步 http 请求线程
    * 在 XMLHttpRequest 在连接后是通过浏览器新开一个线程请求
    * 将检测到状态变更时,如果设置有回调函数,异步线程就产生状态变更事件,将这个回调再放入事件队列中。再由 JavaScript 引擎执行。

*/